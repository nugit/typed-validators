'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.inValidationCycle = inValidationCycle
exports.startValidationCycle = startValidationCycle
exports.endValidationCycle = endValidationCycle
exports.inToStringCycle = inToStringCycle
exports.startToStringCycle = startToStringCycle
exports.endToStringCycle = endToStringCycle
exports.weakSetHas = weakSetHas
exports.weakSetAdd = weakSetAdd
exports.weakSetDelete = weakSetDelete
// Tracks whether we're in validation of cyclic objects.
const cyclicValidation = new WeakMap() // Tracks whether we're toString() of cyclic objects.

const cyclicToString = new WeakSet()

function inValidationCycle(type, input) {
  try {
    const tracked = cyclicValidation.get(type)

    if (!tracked) {
      return false
    } else {
      return weakSetHas(tracked, input)
    }
  } catch (e) {
    // some exotic values cannot be checked
    return true
  }
}

function startValidationCycle(type, input) {
  let tracked = cyclicValidation.get(type)

  if (!tracked) {
    tracked = new WeakSet()
    cyclicValidation.set(type, tracked)
  }

  weakSetAdd(tracked, input)
}

function endValidationCycle(type, input) {
  const tracked = cyclicValidation.get(type)

  if (tracked) {
    weakSetDelete(tracked, input)
  }
}

function inToStringCycle(type) {
  return cyclicToString.has(type)
}

function startToStringCycle(type) {
  cyclicToString.add(type)
}

function endToStringCycle(type) {
  cyclicToString.delete(type)
}

function weakSetHas(weakset, value) {
  try {
    return weakset.has(value)
  } catch (e) {
    return true
  }
}

function weakSetAdd(weakset, value) {
  try {
    weakset.add(value)
  } catch (e) {
    // ignore
  }
}

function weakSetDelete(weakset, value) {
  try {
    weakset.delete(value)
  } catch (e) {
    // ignore
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jeWNsaWMudHMiXSwibmFtZXMiOlsiY3ljbGljVmFsaWRhdGlvbiIsIldlYWtNYXAiLCJjeWNsaWNUb1N0cmluZyIsIldlYWtTZXQiLCJpblZhbGlkYXRpb25DeWNsZSIsInR5cGUiLCJpbnB1dCIsInRyYWNrZWQiLCJnZXQiLCJ3ZWFrU2V0SGFzIiwiZSIsInN0YXJ0VmFsaWRhdGlvbkN5Y2xlIiwic2V0Iiwid2Vha1NldEFkZCIsImVuZFZhbGlkYXRpb25DeWNsZSIsIndlYWtTZXREZWxldGUiLCJpblRvU3RyaW5nQ3ljbGUiLCJoYXMiLCJzdGFydFRvU3RyaW5nQ3ljbGUiLCJhZGQiLCJlbmRUb1N0cmluZ0N5Y2xlIiwiZGVsZXRlIiwid2Vha3NldCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0EsTUFBTUEsZ0JBQWdCLEdBQUcsSUFBSUMsT0FBSixFQUF6QixDLENBQ0E7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLElBQUlDLE9BQUosRUFBdkI7O0FBRU8sU0FBU0MsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQTRDQyxLQUE1QyxFQUFpRTtBQUN0RSxNQUFJO0FBQ0YsVUFBTUMsT0FBTyxHQUFHUCxnQkFBZ0IsQ0FBQ1EsR0FBakIsQ0FBcUJILElBQXJCLENBQWhCOztBQUNBLFFBQUksQ0FBQ0UsT0FBTCxFQUFjO0FBQ1osYUFBTyxLQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0UsVUFBVSxDQUFDRixPQUFELEVBQVVELEtBQVYsQ0FBakI7QUFDRDtBQUNGLEdBUEQsQ0FPRSxPQUFPSSxDQUFQLEVBQVU7QUFDVjtBQUNBLFdBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRU0sU0FBU0Msb0JBQVQsQ0FBOEJOLElBQTlCLEVBQStDQyxLQUEvQyxFQUFpRTtBQUN0RSxNQUFJQyxPQUFPLEdBQUdQLGdCQUFnQixDQUFDUSxHQUFqQixDQUFxQkgsSUFBckIsQ0FBZDs7QUFDQSxNQUFJLENBQUNFLE9BQUwsRUFBYztBQUNaQSxJQUFBQSxPQUFPLEdBQUcsSUFBSUosT0FBSixFQUFWO0FBQ0FILElBQUFBLGdCQUFnQixDQUFDWSxHQUFqQixDQUFxQlAsSUFBckIsRUFBMkJFLE9BQTNCO0FBQ0Q7O0FBQ0RNLEVBQUFBLFVBQVUsQ0FBQ04sT0FBRCxFQUFVRCxLQUFWLENBQVY7QUFDRDs7QUFFTSxTQUFTUSxrQkFBVCxDQUE0QlQsSUFBNUIsRUFBNkNDLEtBQTdDLEVBQStEO0FBQ3BFLFFBQU1DLE9BQU8sR0FBR1AsZ0JBQWdCLENBQUNRLEdBQWpCLENBQXFCSCxJQUFyQixDQUFoQjs7QUFDQSxNQUFJRSxPQUFKLEVBQWE7QUFDWFEsSUFBQUEsYUFBYSxDQUFDUixPQUFELEVBQVVELEtBQVYsQ0FBYjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU1UsZUFBVCxDQUF5QlgsSUFBekIsRUFBbUQ7QUFDeEQsU0FBT0gsY0FBYyxDQUFDZSxHQUFmLENBQW1CWixJQUFuQixDQUFQO0FBQ0Q7O0FBRU0sU0FBU2Esa0JBQVQsQ0FBNEJiLElBQTVCLEVBQW1EO0FBQ3hESCxFQUFBQSxjQUFjLENBQUNpQixHQUFmLENBQW1CZCxJQUFuQjtBQUNEOztBQUVNLFNBQVNlLGdCQUFULENBQTBCZixJQUExQixFQUFpRDtBQUN0REgsRUFBQUEsY0FBYyxDQUFDbUIsTUFBZixDQUFzQmhCLElBQXRCO0FBQ0Q7O0FBRU0sU0FBU0ksVUFBVCxDQUNMYSxPQURLLEVBRUxDLEtBRkssRUFHSTtBQUNULE1BQUk7QUFDRixXQUFPRCxPQUFPLENBQUNMLEdBQVIsQ0FBWU0sS0FBWixDQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9iLENBQVAsRUFBVTtBQUNWLFdBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRU0sU0FBU0csVUFBVCxDQUFrQ1MsT0FBbEMsRUFBdURDLEtBQXZELEVBQXVFO0FBQzVFLE1BQUk7QUFDRkQsSUFBQUEsT0FBTyxDQUFDSCxHQUFSLENBQVlJLEtBQVo7QUFDRCxHQUZELENBRUUsT0FBT2IsQ0FBUCxFQUFVLENBQ1Y7QUFDRDtBQUNGOztBQUVNLFNBQVNLLGFBQVQsQ0FDTE8sT0FESyxFQUVMQyxLQUZLLEVBR0M7QUFDTixNQUFJO0FBQ0ZELElBQUFBLE9BQU8sQ0FBQ0QsTUFBUixDQUFlRSxLQUFmO0FBQ0QsR0FGRCxDQUVFLE9BQU9iLENBQVAsRUFBVSxDQUNWO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUeXBlIGZyb20gJy4vdHlwZXMvVHlwZSdcblxuLy8gVHJhY2tzIHdoZXRoZXIgd2UncmUgaW4gdmFsaWRhdGlvbiBvZiBjeWNsaWMgb2JqZWN0cy5cbmNvbnN0IGN5Y2xpY1ZhbGlkYXRpb24gPSBuZXcgV2Vha01hcCgpXG4vLyBUcmFja3Mgd2hldGhlciB3ZSdyZSB0b1N0cmluZygpIG9mIGN5Y2xpYyBvYmplY3RzLlxuY29uc3QgY3ljbGljVG9TdHJpbmcgPSBuZXcgV2Vha1NldCgpXG5cbmV4cG9ydCBmdW5jdGlvbiBpblZhbGlkYXRpb25DeWNsZSh0eXBlOiBUeXBlPGFueT4sIGlucHV0OiBhbnkpOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0cmFja2VkID0gY3ljbGljVmFsaWRhdGlvbi5nZXQodHlwZSlcbiAgICBpZiAoIXRyYWNrZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2Vha1NldEhhcyh0cmFja2VkLCBpbnB1dClcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBzb21lIGV4b3RpYyB2YWx1ZXMgY2Fubm90IGJlIGNoZWNrZWRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFZhbGlkYXRpb25DeWNsZSh0eXBlOiBUeXBlPGFueT4sIGlucHV0OiBhbnkpOiB2b2lkIHtcbiAgbGV0IHRyYWNrZWQgPSBjeWNsaWNWYWxpZGF0aW9uLmdldCh0eXBlKVxuICBpZiAoIXRyYWNrZWQpIHtcbiAgICB0cmFja2VkID0gbmV3IFdlYWtTZXQoKVxuICAgIGN5Y2xpY1ZhbGlkYXRpb24uc2V0KHR5cGUsIHRyYWNrZWQpXG4gIH1cbiAgd2Vha1NldEFkZCh0cmFja2VkLCBpbnB1dClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZFZhbGlkYXRpb25DeWNsZSh0eXBlOiBUeXBlPGFueT4sIGlucHV0OiBhbnkpOiB2b2lkIHtcbiAgY29uc3QgdHJhY2tlZCA9IGN5Y2xpY1ZhbGlkYXRpb24uZ2V0KHR5cGUpXG4gIGlmICh0cmFja2VkKSB7XG4gICAgd2Vha1NldERlbGV0ZSh0cmFja2VkLCBpbnB1dClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5Ub1N0cmluZ0N5Y2xlKHR5cGU6IFR5cGU8YW55Pik6IGJvb2xlYW4ge1xuICByZXR1cm4gY3ljbGljVG9TdHJpbmcuaGFzKHR5cGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFRvU3RyaW5nQ3ljbGUodHlwZTogVHlwZTxhbnk+KTogdm9pZCB7XG4gIGN5Y2xpY1RvU3RyaW5nLmFkZCh0eXBlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5kVG9TdHJpbmdDeWNsZSh0eXBlOiBUeXBlPGFueT4pOiB2b2lkIHtcbiAgY3ljbGljVG9TdHJpbmcuZGVsZXRlKHR5cGUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWFrU2V0SGFzPFYgZXh0ZW5kcyB7fT4oXG4gIHdlYWtzZXQ6IFdlYWtTZXQ8Vj4sXG4gIHZhbHVlOiBWXG4pOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2Vha3NldC5oYXModmFsdWUpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWFrU2V0QWRkPFYgZXh0ZW5kcyB7fT4od2Vha3NldDogV2Vha1NldDxWPiwgdmFsdWU6IFYpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICB3ZWFrc2V0LmFkZCh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWFrU2V0RGVsZXRlPFYgZXh0ZW5kcyB7fT4oXG4gIHdlYWtzZXQ6IFdlYWtTZXQ8Vj4sXG4gIHZhbHVlOiBWXG4pOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICB3ZWFrc2V0LmRlbGV0ZSh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG59XG4iXX0=
