'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = void 0

var _Type = _interopRequireDefault(require('./Type'))

var _ObjectTypeProperty = _interopRequireDefault(
  require('./ObjectTypeProperty')
)

var _cyclic = require('../cyclic')

var _InvalidTypeErrorItem = _interopRequireDefault(
  require('../errorReporting/InvalidTypeErrorItem')
)

var _UnknownPropertyErrorItem = _interopRequireDefault(
  require('../errorReporting/UnknownPropertyErrorItem')
)

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    })
  } else {
    obj[key] = value
  }
  return obj
}

class ObjectType extends _Type.default {
  constructor(properties = [], exact = true) {
    super()

    _defineProperty(this, 'typeName', 'ObjectType')

    _defineProperty(this, 'properties', void 0)

    _defineProperty(this, 'exact', void 0)

    for (let i = 0; i < properties.length; i++) {
      if (!(properties[i] instanceof _ObjectTypeProperty.default)) {
        throw new Error(
          `properties[${i}] must be an instance of ObjectTypeProperty`
        )
      }
    }

    this.properties = properties
    this.exact = exact
    properties.forEach(prop => (prop.__objectType = this))
  }

  resolveObjectType() {
    return this
  }

  *errors(validation, path, input) {
    if (input == null || typeof input !== 'object' || Array.isArray(input)) {
      yield new _InvalidTypeErrorItem.default(path, input, this)
      return
    }

    if (validation.inCycle(this, input)) {
      return
    }

    validation.startCycle(this, input)
    yield* collectErrorsWithoutIndexers(this, validation, path, input)

    if (this.exact) {
      yield* collectErrorsExact(this, validation, path, input)
    }

    validation.endCycle(this, input)
  }

  accepts(input) {
    if (input === null) {
      return false
    }

    if (typeof input !== 'object' || Array.isArray(input)) {
      return false
    }

    if ((0, _cyclic.inValidationCycle)(this, input)) {
      return true
    }

    ;(0, _cyclic.startValidationCycle)(this, input)
    let result
    result = acceptsWithoutIndexers(this, input)

    if (result && this.exact) {
      result = acceptsExact(this, input)
    }

    ;(0, _cyclic.endValidationCycle)(this, input)
    return result
  }

  get acceptsSomeCompositeTypes() {
    return true
  }

  toString(options) {
    if (
      options === null || options === void 0 ? void 0 : options.formatForMustBe
    ) {
      const formatted = this.toString()
      return /\n/.test(formatted)
        ? `of type:\n\n${formatted.replace(/^/gm, '  ')}`
        : `of type ${formatted}`
    }

    const { properties } = this

    if ((0, _cyclic.inToStringCycle)(this)) {
      return '$Cycle<Record<string, any>>'
    }

    ;(0, _cyclic.startToStringCycle)(this)
    const body = []

    for (let i = 0; i < properties.length; i++) {
      body.push(properties[i].toString())
    }

    ;(0, _cyclic.endToStringCycle)(this)
    return `{\n${indent(body.join('\n'))}\n}`
  }
}

exports.default = ObjectType

function acceptsWithoutIndexers(type, input) {
  const { properties } = type

  for (let i = 0; i < properties.length; i++) {
    const property = properties[i]

    if (!property.accepts(input)) {
      return false
    }
  }

  return true
}

function acceptsExact(type, input) {
  const { properties } = type

  for (const key in input) {
    // eslint-disable-line guard-for-in
    if (!properties.some(property => property.key === key)) {
      return false
    }
  }

  return true
}

function* collectErrorsWithoutIndexers(type, validation, path, input) {
  const { properties } = type

  for (let i = 0; i < properties.length; i++) {
    const property = properties[i]
    yield* property.errors(validation, path, input)
  }
}

function* collectErrorsExact(type, validation, path, input) {
  const { properties } = type

  for (const key in input) {
    // eslint-disable-line guard-for-in
    if (!properties.some(property => property.key === key)) {
      yield new _UnknownPropertyErrorItem.default(path, input, type, key)
    }
  }
}

function indent(input) {
  const lines = input.split('\n')
  const { length } = lines

  for (let i = 0; i < length; i++) {
    lines[i] = `  ${lines[i]}`
  }

  return lines.join('\n')
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
